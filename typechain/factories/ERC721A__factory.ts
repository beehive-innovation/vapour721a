/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { ERC721A, ERC721AInterface } from "../ERC721A";

const _abi = [
  {
    inputs: [
      {
        internalType: "string",
        name: "name_",
        type: "string",
      },
      {
        internalType: "string",
        name: "symbol_",
        type: "string",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "ApprovalCallerNotOwnerNorApproved",
    type: "error",
  },
  {
    inputs: [],
    name: "ApprovalQueryForNonexistentToken",
    type: "error",
  },
  {
    inputs: [],
    name: "ApprovalToCurrentOwner",
    type: "error",
  },
  {
    inputs: [],
    name: "ApproveToCaller",
    type: "error",
  },
  {
    inputs: [],
    name: "BalanceQueryForZeroAddress",
    type: "error",
  },
  {
    inputs: [],
    name: "MintToZeroAddress",
    type: "error",
  },
  {
    inputs: [],
    name: "MintZeroQuantity",
    type: "error",
  },
  {
    inputs: [],
    name: "OwnerQueryForNonexistentToken",
    type: "error",
  },
  {
    inputs: [],
    name: "TransferCallerNotOwnerNorApproved",
    type: "error",
  },
  {
    inputs: [],
    name: "TransferFromIncorrectOwner",
    type: "error",
  },
  {
    inputs: [],
    name: "TransferToNonERC721ReceiverImplementer",
    type: "error",
  },
  {
    inputs: [],
    name: "TransferToZeroAddress",
    type: "error",
  },
  {
    inputs: [],
    name: "URIQueryForNonexistentToken",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "approved",
        type: "address",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "Approval",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "operator",
        type: "address",
      },
      {
        indexed: false,
        internalType: "bool",
        name: "approved",
        type: "bool",
      },
    ],
    name: "ApprovalForAll",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "getApproved",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "operator",
        type: "address",
      },
    ],
    name: "isApprovedForAll",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "ownerOf",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "safeTransferFrom",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "_data",
        type: "bytes",
      },
    ],
    name: "safeTransferFrom",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "operator",
        type: "address",
      },
      {
        internalType: "bool",
        name: "approved",
        type: "bool",
      },
    ],
    name: "setApprovalForAll",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "interfaceId",
        type: "bytes4",
      },
    ],
    name: "supportsInterface",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "tokenURI",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x60806040523480156200001157600080fd5b5060405162001250380380620012508339810160408190526200003491620001df565b8151620000499060029060208501906200006c565b5080516200005f9060039060208401906200006c565b5050600080555062000286565b8280546200007a9062000249565b90600052602060002090601f0160209004810192826200009e5760008555620000e9565b82601f10620000b957805160ff1916838001178555620000e9565b82800160010185558215620000e9579182015b82811115620000e9578251825591602001919060010190620000cc565b50620000f7929150620000fb565b5090565b5b80821115620000f75760008155600101620000fc565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126200013a57600080fd5b81516001600160401b038082111562000157576200015762000112565b604051601f8301601f19908116603f0116810190828211818310171562000182576200018262000112565b816040528381526020925086838588010111156200019f57600080fd5b600091505b83821015620001c35785820183015181830184015290820190620001a4565b83821115620001d55760008385830101525b9695505050505050565b60008060408385031215620001f357600080fd5b82516001600160401b03808211156200020b57600080fd5b620002198683870162000128565b935060208501519150808211156200023057600080fd5b506200023f8582860162000128565b9150509250929050565b600181811c908216806200025e57607f821691505b602082108114156200028057634e487b7160e01b600052602260045260246000fd5b50919050565b610fba80620002966000396000f3fe608060405234801561001057600080fd5b50600436106100ca5760003560e01c80636352211e1161007c5780636352211e1461018857806370a082311461019b57806395d89b41146101ae578063a22cb465146101b6578063b88d4fde146101c9578063c87b56dd146101dc578063e985e9c5146101ef57600080fd5b806301ffc9a7146100cf57806306fdde03146100f7578063081812fc1461010c578063095ea7b31461013757806318160ddd1461014c57806323b872dd1461016257806342842e0e14610175575b600080fd5b6100e26100dd366004610b6e565b61022b565b60405190151581526020015b60405180910390f35b6100ff61027d565b6040516100ee9190610be3565b61011f61011a366004610bf6565b61030f565b6040516001600160a01b0390911681526020016100ee565b61014a610145366004610c2b565b610353565b005b600154600054035b6040519081526020016100ee565b61014a610170366004610c55565b6103da565b61014a610183366004610c55565b6103e5565b61011f610196366004610bf6565b610400565b6101546101a9366004610c91565b610412565b6100ff610460565b61014a6101c4366004610cac565b61046f565b61014a6101d7366004610cfe565b610505565b6100ff6101ea366004610bf6565b61054f565b6100e26101fd366004610dd9565b6001600160a01b03918216600090815260076020908152604080832093909416825291909152205460ff1690565b60006001600160e01b031982166380ac58cd60e01b148061025c57506001600160e01b03198216635b5e139f60e01b145b8061027757506301ffc9a760e01b6001600160e01b03198316145b92915050565b60606002805461028c90610e0c565b80601f01602080910402602001604051908101604052809291908181526020018280546102b890610e0c565b80156103055780601f106102da57610100808354040283529160200191610305565b820191906000526020600020905b8154815290600101906020018083116102e857829003601f168201915b5050505050905090565b600061031a826105e1565b610337576040516333d1c03960e21b815260040160405180910390fd5b506000908152600660205260409020546001600160a01b031690565b600061035e82610400565b9050806001600160a01b0316836001600160a01b031614156103935760405163250fdee360e21b815260040160405180910390fd5b336001600160a01b038216146103ca576103ad81336101fd565b6103ca576040516367d9dca160e11b815260040160405180910390fd5b6103d583838361060c565b505050565b6103d5838383610668565b6103d583838360405180602001604052806000815250610505565b600061040b82610855565b5192915050565b60006001600160a01b03821661043b576040516323d3ad8160e21b815260040160405180910390fd5b506001600160a01b03166000908152600560205260409020546001600160401b031690565b60606003805461028c90610e0c565b6001600160a01b0382163314156104995760405163b06307db60e01b815260040160405180910390fd5b3360008181526007602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b610510848484610668565b6001600160a01b0383163b156105495761052c8484848461096f565b610549576040516368d2bf6b60e11b815260040160405180910390fd5b50505050565b606061055a826105e1565b61057757604051630a14c4b560e41b815260040160405180910390fd5b600061058e60408051602081019091526000815290565b90508051600014156105af57604051806020016040528060008152506105da565b806105b984610a58565b6040516020016105ca929190610e47565b6040516020818303038152906040525b9392505050565b6000805482108015610277575050600090815260046020526040902054600160e01b900460ff161590565b60008281526006602052604080822080546001600160a01b0319166001600160a01b0387811691821790925591518593918516917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591a4505050565b600061067382610855565b9050836001600160a01b031681600001516001600160a01b0316146106aa5760405162a1148160e81b815260040160405180910390fd5b6000336001600160a01b03861614806106c857506106c885336101fd565b806106e35750336106d88461030f565b6001600160a01b0316145b90508061070357604051632ce44b5f60e11b815260040160405180910390fd5b6001600160a01b03841661072a57604051633a954ecd60e21b815260040160405180910390fd5b6107366000848761060c565b6001600160a01b038581166000908152600560209081526040808320805467ffffffffffffffff198082166001600160401b0392831660001901831617909255898616808652838620805493841693831660019081018416949094179055898652600490945282852080546001600160e01b031916909417600160a01b4290921691909102178355870180845292208054919390911661080a57600054821461080a57805460208601516001600160401b0316600160a01b026001600160e01b03199091166001600160a01b038a16171781555b50505082846001600160a01b0316866001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a45050505050565b60408051606081018252600080825260208201819052918101919091528160005481101561095657600081815260046020908152604091829020825160608101845290546001600160a01b0381168252600160a01b81046001600160401b031692820192909252600160e01b90910460ff161515918101829052906109545780516001600160a01b0316156108eb579392505050565b5060001901600081815260046020908152604091829020825160608101845290546001600160a01b038116808352600160a01b82046001600160401b031693830193909352600160e01b900460ff161515928101929092521561094f579392505050565b6108eb565b505b604051636f96cda160e11b815260040160405180910390fd5b604051630a85bd0160e11b81526000906001600160a01b0385169063150b7a02906109a4903390899088908890600401610e76565b6020604051808303816000875af19250505080156109df575060408051601f3d908101601f191682019092526109dc91810190610eb3565b60015b610a3a573d808015610a0d576040519150601f19603f3d011682016040523d82523d6000602084013e610a12565b606091505b508051610a32576040516368d2bf6b60e11b815260040160405180910390fd5b805181602001fd5b6001600160e01b031916630a85bd0160e11b1490505b949350505050565b606081610a7c5750506040805180820190915260018152600360fc1b602082015290565b8160005b8115610aa65780610a9081610ee6565b9150610a9f9050600a83610f17565b9150610a80565b6000816001600160401b03811115610ac057610ac0610ce8565b6040519080825280601f01601f191660200182016040528015610aea576020820181803683370190505b5090505b8415610a5057610aff600183610f2b565b9150610b0c600a86610f42565b610b17906030610f56565b60f81b818381518110610b2c57610b2c610f6e565b60200101906001600160f81b031916908160001a905350610b4e600a86610f17565b9450610aee565b6001600160e01b031981168114610b6b57600080fd5b50565b600060208284031215610b8057600080fd5b81356105da81610b55565b60005b83811015610ba6578181015183820152602001610b8e565b838111156105495750506000910152565b60008151808452610bcf816020860160208601610b8b565b601f01601f19169290920160200192915050565b6020815260006105da6020830184610bb7565b600060208284031215610c0857600080fd5b5035919050565b80356001600160a01b0381168114610c2657600080fd5b919050565b60008060408385031215610c3e57600080fd5b610c4783610c0f565b946020939093013593505050565b600080600060608486031215610c6a57600080fd5b610c7384610c0f565b9250610c8160208501610c0f565b9150604084013590509250925092565b600060208284031215610ca357600080fd5b6105da82610c0f565b60008060408385031215610cbf57600080fd5b610cc883610c0f565b915060208301358015158114610cdd57600080fd5b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b60008060008060808587031215610d1457600080fd5b610d1d85610c0f565b9350610d2b60208601610c0f565b92506040850135915060608501356001600160401b0380821115610d4e57600080fd5b818701915087601f830112610d6257600080fd5b813581811115610d7457610d74610ce8565b604051601f8201601f19908116603f01168101908382118183101715610d9c57610d9c610ce8565b816040528281528a6020848701011115610db557600080fd5b82602086016020830137600060208483010152809550505050505092959194509250565b60008060408385031215610dec57600080fd5b610df583610c0f565b9150610e0360208401610c0f565b90509250929050565b600181811c90821680610e2057607f821691505b60208210811415610e4157634e487b7160e01b600052602260045260246000fd5b50919050565b60008351610e59818460208801610b8b565b835190830190610e6d818360208801610b8b565b01949350505050565b6001600160a01b0385811682528416602082015260408101839052608060608201819052600090610ea990830184610bb7565b9695505050505050565b600060208284031215610ec557600080fd5b81516105da81610b55565b634e487b7160e01b600052601160045260246000fd5b6000600019821415610efa57610efa610ed0565b5060010190565b634e487b7160e01b600052601260045260246000fd5b600082610f2657610f26610f01565b500490565b600082821015610f3d57610f3d610ed0565b500390565b600082610f5157610f51610f01565b500690565b60008219821115610f6957610f69610ed0565b500190565b634e487b7160e01b600052603260045260246000fdfea2646970667358221220fdb695c5aedfb076d852f57fda488ef7265ea0b9419c06cd6fd7d81a38af0f9b64736f6c634300080a0033";

type ERC721AConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ERC721AConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ERC721A__factory extends ContractFactory {
  constructor(...args: ERC721AConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    name_: string,
    symbol_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ERC721A> {
    return super.deploy(name_, symbol_, overrides || {}) as Promise<ERC721A>;
  }
  getDeployTransaction(
    name_: string,
    symbol_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(name_, symbol_, overrides || {});
  }
  attach(address: string): ERC721A {
    return super.attach(address) as ERC721A;
  }
  connect(signer: Signer): ERC721A__factory {
    return super.connect(signer) as ERC721A__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ERC721AInterface {
    return new utils.Interface(_abi) as ERC721AInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ERC721A {
    return new Contract(address, _abi, signerOrProvider) as ERC721A;
  }
}
